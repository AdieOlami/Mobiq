//
//  LocalStorage.swift
//  Flickr
//
//  Created by Olar's Mac on 3/26/20.
//  Copyright Â© 2020 Adie Olalekan. All rights reserved.
//

import Foundation


class Storage {
    //This key value is randomly generated by you and should never be the same.
    private let key = "Y83&BC$ONC@nw2"
    
    static var instance = Storage()
    private var storage = UserDefaults.standard
    
    private init() {
    }
    
    public func clearAll() {
        let appDomain = Bundle.main.bundleIdentifier!
        storage.removePersistentDomain(forName: appDomain)
    }
    
    public func saveKey(_ val: String) {
        put(val, forKey: key)
    }
    
    public func deleteKey() {
        delete(key: key)
    }
    
    public func getKey() -> String? {
        return get(forKey: key)
    }
    
    public func saveSearchValues (_ values: String) {
        putArray(values, forKey: key)
    }
    
    public func getSearchValues () -> [String] {
        return getArray(forKey: key)
    }
    
    private func put(_ value: Any?, forKey key: String) {
        guard let value = value else {
            storage.removeObject(forKey: key)
            return
        }
        storage.setValue(NSKeyedArchiver.archivedData(withRootObject: value), forKey: key)
    }
    
    private func putArray(_ value: String?, forKey key: String) {
       guard let value = value else {
           return
       }
       var newArray = getArray(forKey: key)
       if newArray.contains(value) {
           newArray.remove(at: newArray.firstIndex(of: value)!)
           newArray.append(value)
       } else if newArray.count == 4 {
           newArray.removeFirst()
           newArray.append(value)
       } else {
           newArray.append(value)
       }
       storage.setValue(NSKeyedArchiver.archivedData(withRootObject: newArray), forKey: key)
   }
   
   private func getArray(forKey key: String) -> [String] {
       let array = [String]()
       guard let data = storage.data(forKey: key) else { return array }
       return NSKeyedUnarchiver.unarchiveObject(with: data) as! [String]
   }
    
    private func get<T>(forKey key: String) -> T? {
        guard let data = storage.data(forKey: key) else { return nil}
        return NSKeyedUnarchiver.unarchiveObject(with: data) as? T
    }
    
    private func delete(key: String) {
        storage.removeObject(forKey: key)
    }
}
